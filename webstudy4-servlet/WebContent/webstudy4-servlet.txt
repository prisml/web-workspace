Servlet 기본
1. 환경설정
	: WAS(apache-tomcat) 설치 및 설정
		-> conf/server.xml	웹포트 변경(오라클 웹포트와 중복되므로)
							get방식 요청시 한글 처리를 위해
							RRIEncoding="utf-8"
		-> conf/context.xml	reloadable="true"
							개발시점에 변경되는 코드를
							자동으로 리로딩하도록 설정
							(workspace -- 배포 --> webapps)
							
2. Servlet
							WAS(web server + web container)
	browser --request-->										<-- DB
			<--response--
			
	----------------------------------------
	browser : html 문서를 번역
				html, javascript, css를 해석하여 웹화면을 제공
				http 기반 메세지를 송수신
				
	http : hypertext transfer protocol
	
	WAS : Web Server와 Web Container
	
	Web Server : html 서비스
	
	Web Container : servlet container or jsp engine이라고도 한다
					Servlet과 JSP가 실행될 수 있는 환경을 제공한다
					(Servlet LifeCycle, JSP를 Java(Servlet)로 변환 등...)
					
	http 요청방식 GET과 POST
	
	GET 방식 : 정보 조회용도
				모든 링크는 GET방식으로 요청된다
				브라우저 URL에 노출된다
				전송 데이터 양은 한정된다
				Form tag에서 별도의 method(전송방식)을
				명시하지 않으면 기본이 get방식이다
	POST 방식 : 정보 전송 용도
				브라우저 URL에 노출되지 않고 HTTP body부분으로 전송된다
				즉 보안성이 get방식 보다 높다
				사용자 정보 및 많은 용량의 데이터는
				POST방식으로 전송해야 한다
				POST 방식으로 전송되는 데이터에 대한
				서버 프로그램 차원에서 별도의 한글처리가 필요하다
				(request.setCharacterEncoding("utf-8");)
				
	web.xml : DD(deployment Descriptor)
				웹어플리케이션의 설정정보(메타정보)를 명시한다
				Web application 최초 시작할 때 DD 파일을 로딩한다
				(ServletConfig, ServletContext, Session 설정 등)
				
	** 메타데이터(meta-data) **
	데이터의 데이터. 설정정보
	웹어플리케이션의 메타데이터는 XML과 Annotation으로 작성 가능하다
	Annotation : 의미있는 주석 @Override, @WebServlet(url), @Controller등..
	
	XML : eXtensible markup language
		확장 가능 마크업 언어
		-> 주로 메타정ㅂ를 저장할 때 사용
			-> 2000년대 중반에는 Ajax를 위해 사용했으나
				최근에는 JSON으로 대체
			소스코드 + 메타데이타가 분리되는 방식			
			
확인해볼 용어
Servlet : java Server program을 구현하기 위한 기술
			자바 웹어플리케이션 구현을 위한 기술
Was : Web Application Server (Web Server + Web Container)
HTTP : HyperText Transfer Protocol
browser : web client program, http를 이해, 분석하고
		html(javascript, css포함)을 번역하여 실행
Web Container : Servlet, JSP 실행환경(Thread, LifeCycle 등)
web.xml : Deployment Descriptor 웹어플리케이션 설정정보 기술
form method : 요청방식
form action : 요청을 처리할 서버 프로그램 url
get방식 post방식 : get -> 정보조회(url 노출), post->정보전송(url 노출x, 보안성 우수)
javascript : client-side-script(html 에서 동적인 역할 담당)
			최근에는 server-side-script로도 역할을 한다
HttpServletRequest와 HttpServletResponse
클라이언트 요청정보 	클라이언트에게 응답하기 위한 정보

위의 모든 요소들이 모두 다 인터페이스이다
왜 많은 주요 요소들이 인터페이스로 설계했을까?
플로새폼 독립적, 표준화, 다형성